import telebot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import requests
import random
from random import choice, randint
import time
import datetime



TOKEN = '6966870333:AAERugXZmLJaSWbP21wZL4JXE_HueVfA1rg'
BOT = telebot.TeleBot(token = TOKEN)



pokemon_url = "https://pokeapi.co/api/v2/pokemon/"
pokemon_json = requests.get(pokemon_url).json()




vesely = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/–≤–µ—Å–µ–ª—ã–π_–∫–æ—Ç.jpg', 'rb')

dovolny = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/–¥–æ–≤–æ–ª—å–Ω—ã–π_–∫–æ—Ç.jpg', 'rb')

zabavny = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/–∑–∞–±–∞–≤–Ω—ã–π –∫–æ—Ç.jpg', 'rb')

ughas = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/–∫–æ—Ç_–≤_—É–∂–∞—Å–µ.jpg', 'rb')

kreyzi = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/–∫—Ä–µ–π–∑–∏_–∫–æ—Ç.jpg', 'rb')

podderzhivayushi = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π_–∫–æ—Ç.jpg', 'rb')
    
ponikshy = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/–ø–æ–Ω–∏–∫—à–∏–π_–∫–æ—Ç.jpg', 'rb')
    
rasstroyenny = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π_–∫–æ—Ç.jpg', 'rb')
    
udivlenny = open('C:/Users/–°–∞–º–∏—Ä/.vscode/TelegramBOT/–∫–æ—Ç—ã/—É–¥–∏–≤–ª–µ–Ω–Ω—ã–π_–∫–æ—Ç.jpg', 'rb')



@BOT.message_handler(commands=['start'])
def welcome(message:Message):
    BOT.reply_to(message,
                 f'–ü—Ä–∏–≤–µ—Ç, {message.chat.username}! –Ø —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –±–æ—Ç. –í—Å–µ –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –≤ –ª–∏—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏! –†–∞–∑–≤–ª–µ–∫–∞–π—Å—è...')
    
    print(message.chat.username)
    


# –ü–æ–∫–µ–º–æ–Ω –±–æ—Ç

@BOT.message_handler(commands=['pokemon'])
def send_pokemon(message : Message):
    pokemon_id = random.randint(1, 898)
    responce = requests.get(pokemon_url + str(pokemon_id)).json()
    if "sprites" in responce and "front_default" in responce["sprites"]:
        img = responce["sprites"]["front_default"]
        BOT.send_photo(message.chat.id, img, f"{responce['species'].get('name')} \n–ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç: {responce['base_experience']}, –≤—ã—Å–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞: {responce['height'], responce['weight']}")
    print(message.chat.username)

# –ù–µ —Ä–∞–±–æ—á–∏–π –∫–æ–¥...

# @BOT.message_handler(commands = ['name_of_pokemon'])
# def send_pokemon_from_name(message : Message):
#     BOT.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –ø–æ–∫–µ–º–æ–Ω–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ')
#     def search_pokemon(message : Message):
#         pokemon_name = message.text.strip().lower()
#         responce = requests.get(pokemon_url + '?name=' + str(pokemon_name)).json()
#         responce = requests.get(responce['url'])
#         if "sprites" in responce and "front_default" in responce["sprites"]:
#             img = responce["sprites"]["front_default"]
#             BOT.send_photo(message.chat.id, img, f"{responce['species'].get('name')} \n–ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç: {responce['base_experience']}, –≤—ã—Å–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞: {responce['height'], responce['weight']}")
#         else:
#             print(responce)
#     return search_pokemon(message)
    

    
# –ö–æ—à–∫–∏ –∏ —Å–æ–±–∞–∫–∏
    
with open('C:/Users/–°–∞–º–∏—Ä/.vscode/Lessons/Lesson 54/cats.txt', 'r', encoding='utf-8') as file:
    cats = [line.strip('\n') for line in file]

with open('C:/Users/–°–∞–º–∏—Ä/.vscode/Lessons/Lesson 54/dogs.txt', 'r', encoding='utf-8') as file:
    dogs = [line.strip('\n') for line in file]
    
@BOT.message_handler(commands=['mood'])
def mood(message : Message):
    Keyboard = ReplyKeyboardMarkup()
    button1 = KeyboardButton('üòÆ')
    button2 = KeyboardButton('üòâ')
    button3 = KeyboardButton('üôÇ')
    button4 = KeyboardButton('üò¢')
    button5 = KeyboardButton('ü§Ø')
    button6 = KeyboardButton('ü§°')
    button7 = KeyboardButton('üòµ‚Äçüí´')
    button8 = KeyboardButton('ü§™')
    button9 = KeyboardButton('üòõ')
    Keyboard.add(button1,button2,button3,button4,button5,button6,button7,button8,button9)

    BOT.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–º–∞–π–ª', reply_markup=Keyboard)
    BOT.register_next_step_handler(message, choosen_mood)

def choosen_mood(message : Message):
    if message.text.strip().lower() == 'üòÆ':
        BOT.send_photo(message.chat.id, udivlenny)
    elif message.text.strip().lower() == 'üòâ':
        BOT.send_photo(message.chat.id, podderzhivayushi)
    elif message.text.strip().lower() == 'üôÇ':
        BOT.send_photo(message.chat.id, dovolny)
    elif message.text.strip().lower() == 'üò¢':
        BOT.send_photo(message.chat.id, rasstroyenny)
    elif message.text.strip().lower() == 'ü§Ø':
        BOT.send_photo(message.chat.id, ughas)
    elif message.text.strip().lower() == 'ü§°':
        BOT.send_photo(message.chat.id, kreyzi)
    elif message.text.strip().lower() == 'üòµ‚Äçüí´':
        BOT.send_photo(message.chat.id, ponikshy)
    elif message.text.strip().lower() == 'ü§™':
        BOT.send_photo(message.chat.id, zabavny)
    elif message.text.strip().lower() == 'üòõ':
        BOT.send_photo(message.chat.id, vesely)
    else:
        return 1



# –í—Ä–µ–º—è
@BOT.message_handler(commands=['secundamer'])
def secundamer(message : Message):
    BOT.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ:"–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°"')

    @BOT.message_handler(func = lambda message : True)
    def secss(message : Message):
        timme = message.text.strip()
        try:
            result = time.strptime(timme, '%Y-%m-%d %H:%M:%S')

            nowww = datetime.datetime.now()
            after_this = datetime.datetime(result.tm_year, result.tm_mon, result.tm_mday, result.tm_hour, result.tm_min, result.tm_sec)
            reresult = after_this - nowww

            BOT.reply_to(message, f'–û—Å—Ç–∞–ª–æ—Å—å {reresult} –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞')
            # BOT.reply_to(message, f'–û—Å—Ç–∞–ª–æ—Å—å {reresult.days} –¥–Ω–µ–π, {reresult.seconds // 60 // 60} —á–∞—Å–æ–≤, {reresult.seconds - ( } –º–∏–Ω—É—Ç, {reresult.seconds // 1} —Å–µ–∫—É–Ω–¥ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞')
        except:
            BOT.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –¥–∞—Ç—É! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏...')
        
        print(message.chat.username)

@BOT.message_handler(commands=['birthday'])
def birthday_day(message : Message):
    now = datetime.datetime.now()
    birthday = datetime.datetime(2024, 10, 21)

    result = (birthday - now).days
    # result = result - 'days'

    BOT.send_message(message.chat.id, f'–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å {result} –¥–Ω–µ–π ü•≥')

@BOT.message_handler(commands=['buttons'])
def button(message : Message):
    markup = InlineKeyboardMarkup(row_width=1)
    cats = InlineKeyboardButton('üê±', callback_data = 'cats')
    dogs = InlineKeyboardButton('üê∂', callback_data = 'dogs')
    markup.add(cats, dogs)
    BOT.send_message(message.chat.id, '–ö–æ—à–µ—á–∫–∏ –∏–ª–∏ —Å–æ–±–∞—á–∫–∏?',
                     reply_markup=markup)
    print(message.chat.username)
    


# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞

@BOT.message_handler(commands=['play'])
def play(message : Message):
    markup = InlineKeyboardMarkup(row_width=1)
    stone = InlineKeyboardButton('ü™®', callback_data='stone')
    scissors = InlineKeyboardButton('‚úÇÔ∏è', callback_data = 'scissors')
    paper = InlineKeyboardButton('üìú', callback_data = 'paper')
    markup.add(stone, scissors, paper)
    BOT.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ \n–í—ã–±–∏—Ä–∞–π, —á–µ–º –±—É–¥–µ—à—å —Ö–æ–¥–∏—Ç—å',
                     reply_markup=markup)
    
    print(message.chat.username)



# –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
memory = []

@BOT.message_handler(commands=['set'])
def set_memory(message : Message):
    BOT.send_message(message.chat.id, '–ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?')
    # global memory
    # memory.append(message.text.split(' ', 1)[1])
    # BOT.send_chat_action(message.chat.id, 'typing')
    # time.sleep(3)
    # last_memory = memory[-1]
    # print(memory)
    print(message.chat.username)
    BOT.register_next_step_handler(message, set__memory)

def set__memory(message : Message):
    global memory
    memory.append(message.text)
    BOT.send_chat_action(message.chat.id, action = 'typing')
    time.sleep(2)
    last_memory = memory[-1]
    BOT.send_message(message.chat.id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {last_memory} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    print(memory)
    BOT.send_message(message.chat.id, '–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º –æ–± —ç—Ç–æ–º? (0 —Å–µ–∫—É–Ω–¥ == –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å)')
    BOT.register_next_step_handler(message, set_time, message.text)

vremya = {}

def set_time(message : Message, napomynanie):
    seconds = int(message.text.strip())
    global vremya
    if seconds == 0:
        vremya.update += {napomynanie : '–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å'}
    else:
        vremya.update({napomynanie : seconds})

@BOT.message_handler(commands=['history'])
def history(message : Message):
    BOT.send_chat_action(message.chat.id, action = 'typing')
    time.sleep(1)
    BOT.send_message(message.chat.id, f'–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(memory), vremya}')

@BOT.message_handler(commands=['del_history'])
def history(message : Message):
    global memory
    BOT.send_chat_action(message.chat.id, action = 'typing')
    time.sleep(3)
    memory = []
    BOT.send_message(message.chat.id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—ë—Ä—Ç—ã...')



# –§—É–Ω–∫—Ü–∏—è callback

@BOT.callback_query_handler(func = lambda call : True)
def callback(call : Message):
    if call is not None:


        # –ö–æ—à–∫–∏ –∏–ª–∏ —Å–æ–±–∞–∫–∏

        if call.data == 'cats':
            BOT.send_message(call.message.chat.id, choice(cats))
        if call.data == 'dogs':
            BOT.send_message(call.message.chat.id, choice(dogs))


        
        if call.data == 'üòÆ':
            BOT.send_message(call.message.chat.id, 'asdfg')


        # –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞

        mode_n = randint(1,3)

        if call.data == 'stone':
            if mode_n == 1:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å! \n\n**–ù–∏—á—å—è!**')
            elif mode_n == 2:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –Ω–æ–∂–Ω–∏—Ü—ã! \n\n**–¢—ã –ø–æ–±–µ–¥–∏–ª**!')
            else:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –±—É–º–∞–≥—É! \n\n**–Ø –ø–æ–±–µ–¥–∏–ª!**')
        if call.data == 'scissors':
            if mode_n == 1:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å! \n\n**–Ø –ø–æ–±–µ–¥–∏–ª!**')
            elif mode_n == 2:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –Ω–æ–∂–Ω–∏—Ü—ã! \n\n**–ù–∏—á—å—è!**')
            else:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –±—É–º–∞–≥—É! \n\n**–¢—ã –ø–æ–±–µ–¥–∏–ª!**')
        if call.data == 'paper':
            if mode_n == 1:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å! \n\n**–¢—ã –ø–æ–±–µ–¥–∏–ª!**')
            elif mode_n == 2:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –Ω–æ–∂–Ω–∏—Ü—ã! \n\n**–Ø –ø–æ–±–µ–¥–∏–ª!**')
            else:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –±—É–º–∞–≥—É! \n\n**–ù–∏—á—å—è!**')



BOT.polling()