import telebot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import requests
import random
from random import choice, randint
import time
import datetime



TOKEN = '6848216406:AAGnW9WMvgPrA9wnycEEkzfrzLs5xbpvZnQ'
BOT = telebot.TeleBot(token = TOKEN)

message_play = ''
dead = False

starses = 200 
name = '–ò–ú–ï–ù–ò –ù–ï–¢'
energy = 56
happiness = 78
satiety = 46

@BOT.message_handler(commands=['start', 'retry'])
def welcome(message:Message):
    global energy, happiness, satiety
    energy = 70
    happiness = 80
    satiety = 60
    BOT.reply_to(message,
                 f'–ü—Ä–∏–≤–µ—Ç, {message.chat.username}!\n–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü! –ü—Ä–∏–¥—É–º–∞–π –º–Ω–µ –∏–º—è:')
    BOT.register_next_step_handler(message, naming)

    print(message.chat.username)

def it_is_death(chat_id):
    global name, dead
    markup = InlineKeyboardMarkup(row_width=1)
    yes = InlineKeyboardButton('–ö–æ–Ω–µ—á–Ω–æ –¥–∞!', callback_data = 'death_yes')
    no = InlineKeyboardButton("–ù–µ—Ç, –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±—É—é –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑(", callback_data = 'death_no')
    resurrection = InlineKeyboardButton(f"–í–æ—Å–∫—Ä–µ—Å–∏—Ç—å (200 —Å—Ç–∞—Ä—Å–æ–≤ ‚ú® (—É —Ç–µ–±—è {starses} —Å—Ç–∞—Ä—Å–æ–≤))", callback_data = 'resurrection')
    markup.add(yes, no, resurrection)
    BOT.send_message(chat_id, '–ú–æ–∂–µ—Ç —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≤–µ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞ –µ—â–µ —Ä–∞–∑?',
                     reply_markup=markup)
    dead = True

def hungryest():
    global satiety
    if randint(1, 100) == 1 and satiety > 30:
        satiety -= 1
    else:
        pass

hungryest()

def feed():
    global satiety, energy
    satiety += randint(5, 31)
    energy += randint(5, 21)
    if energy > 100:
        energy = 100

def check(chat_id):
    global satiety, energy, happiness
    if satiety > 110:
        it_is_death(chat_id)
        return '–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä –æ—Ç –ø–µ—Ä–µ–∫–æ—Ä–º–ª–µ–Ω–∏—è( \n\n–û–Ω —É–º–µ—Ä —Ç–æ—á–Ω–æ –Ω–µ –≥–æ–ª–æ–¥–Ω–æ–π —Å–º–µ—Ä—Ç—å—é...'
    if satiety < 1:
        it_is_death(chat_id)
        return '–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä –æ—Ç –∏—Å—Ç–æ—â–µ–Ω–∏—è((( \n\n–ö–æ—Ä–º–∏–ª –±—ã —Ç—ã —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —á–∞—â–µ!'
    if energy < 10:
        it_is_death(chat_id)
        return '–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä –æ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏( \n\n–î–∞–∂–µ –∂–∏–≤–æ—Ç–Ω—ã–º –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö!!'
    if happiness < 10:
        it_is_death(chat_id)
        return '–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä –æ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è((( \n\n–í—Å–µ–º –Ω—É–∂–Ω—ã –∏–≥—Ä—ã!!!'
    else:
        return f'–£ —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ö–∞—Ä-–∫–∏: \n–≠–Ω–µ—Ä–≥–∏—è -- {energy}\n–°—ã—Ç–æ—Å—Ç—å -- {satiety}\n–°—á–∞—Å—Ç—å–µ -- {happiness}\n\n–£ —Ç–µ–±—è {starses} —Å—Ç–∞—Ä—Å–æ–≤ ‚ú®'

def play():
    global happiness
    global energy, satiety
    happiness += randint(10, 71)
    energy -= randint(15, 31)
    satiety -= randint(1, 20)
    if energy > 100:
        energy = 100
    if happiness > 100:
        happiness = 100

def sleepZZZ():
    global energy, happiness
    energy = 90
    if randint(1, 100) < 20:
        happiness -= 25
    else:
        happiness += randint(25, 36)
    
    if happiness > 100:
        happiness = 100

def naming(message):
    global name
    name = message.text.strip()
    BOT.send_message(message.chat.id, '–ö–ª–∞—Å—Å–Ω–æ–µ –∏–º—è! –¢–µ–ø–µ—Ä—å —Ç—ã –¥–æ–ª–∂–µ–Ω —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º!\n–°–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Å —Ç–≤–æ–∏–º –ø–∏—Ç–æ–º—Ü–µ–º –µ—Å—Ç—å —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞...')
    BOT.send_message(message.chat.id, check(message.chat.id))

@BOT.message_handler(commands=['check'])
def check_handler(message:Message):
    BOT.send_message(message.chat.id, check(message.chat.id))

@BOT.message_handler(commands=['feed'])
def feed_handler(message:Message):
    global name, dead
    if dead == True:
        BOT.send_message(message.chat.id, '–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä!')
    else:
        feed()
        BOT.send_message(message.chat.id, f'{name} –ø–æ–µ–ª!')
        BOT.send_message(message.chat.id, check(message.chat.id))

@BOT.message_handler(commands=['sleep'])
def sleepZZZ_handler(message:Message):
    if dead == True:
        BOT.send_message(message.chat.id, '–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä!')
    else:
        global satrses
        starses += randint(50, 120)
        sleepZZZ()
        timee = 20
        BOT.send_message(message.chat.id, f'–¢—ã —É–ª–æ–∂–∏–ª –ø–∏—Ç–æ–º—Ü–∞ —Å–ø–∞—Ç—å! –ü–æ–∫–∞ {name} —Å–ø–∏—Ç —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å –Ω–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å')
        msg = BOT.send_message(message.chat.id, f'{name} –ø—Ä–æ—Å–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {timee} —Å–µ–∫—É–Ω–¥')
        for i in range(1, timee):
            BOT.edit_message_text(f'{name} –ø—Ä–æ—Å–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {timee} —Å–µ–∫—É–Ω–¥', message.chat.id, msg.message_id)
            time.sleep(1)
            timee -= 1
        BOT.edit_message_text(f'{name} –ø—Ä–æ—Å–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 0 —Å–µ–∫—É–Ω–¥', message.chat.id, msg.message_id)
        BOT.send_message(message.chat.id, f'{name} –ø—Ä–æ—Å–Ω—É–ª—Å—è!')
        BOT.send_message(message.chat.id, check(message.chat.id))

@BOT.message_handler(commands=['play'])
def play_handler(message : Message):
    global message_play
    message_play = message
    if dead == True:
        BOT.send_message(message.chat.id, '–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä!')
    else:
        markup = InlineKeyboardMarkup(row_width=1)
        stone = InlineKeyboardButton('ü™®', callback_data='stone')
        scissors = InlineKeyboardButton('‚úÇÔ∏è', callback_data = 'scissors')
        paper = InlineKeyboardButton('üìú', callback_data = 'paper')
        markup.add(stone, scissors, paper)
        BOT.send_message(message.chat.id, '–£—Ä–∞, –¥–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ \n–í—ã–±–∏—Ä–∞–π, —á–µ–º –±—É–¥–µ—à—å —Ö–æ–¥–∏—Ç—å',
                         reply_markup=markup)
    
        print(message.chat.username)

@BOT.message_handler(content_types=['text'])
def text_handler(message):
    if dead == True:
        BOT.send_message(message.chat.id, '–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä!')
    else:
        word = message.text
        word = word.replace("—Ä—å", "–≤—å")
        word = word.replace("–†—å", "–í—å")
        word = word.replace("–ª—å", "–≤—å")
        word = word.replace('–õ—å', '–í—å')
        word = word.replace("—Ä", "–≤")
        word = word.replace("–†", "–í")
        word = word.replace('–ñ', '–ó—å')
        word = word.replace('–∂', '–∑—å')
        word = word.replace("–ª", "–≤")
        word = word.replace('–õ', '–í')
        word = word.replace('—à', '—Å—å')
        word = word.replace('–®', '–°—å')
        word = word.replace('—â', '—Å—å')
        word = word.replace('–©', '–°—å')

        print(word)
        BOT.reply_to(message, f'–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞ —Ç–æ–±–æ–π: {word}')     

@BOT.callback_query_handler(func = lambda call : True)
def callback(call : Message):
    global starses, dead

    if call is not None:

        if call.data == 'death_yes':
            BOT.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏ —Å—é–¥–∞ --> /retry')
        if call.data == 'death_no':
            markup = InlineKeyboardMarkup(row_width=1)
            yes = InlineKeyboardButton('–õ—É—á—à–µ –ø—Ä–æ–¥–æ–ª–∂—É!', callback_data = 'death_yes')
            no = InlineKeyboardButton("–ù–µ—Ç, —Ç–æ—á–Ω–æ –Ω–µ—Ç", callback_data = 'death_no_else')
            markup.add(yes, no)
            BOT.send_message(call.message.chat.id, '–¢—ã —Ç–æ—á–Ω–æ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å?',
                             reply_markup=markup)
        if call.data == 'death_no_else':
            BOT.send_message(call.message.chat.id, '–ñ–∞–ª—å... –ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–≤–µ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞, –Ω–∞–∂–º–∏ —Å—é–¥–∞ --> /retry')
        if call.data == 'resurrection':
            if starses >= 200:
                BOT.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü –≤–æ—Å–∫—Ä–µ—à—ë–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–π —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º')
                starses -= 200
                dead = False
            else:
                BOT.send_message(call.message.chat.id, '–£ —Ç–µ–±—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç–∞—Ä—Å–æ–≤, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞(((')
                it_is_death(welcome.message.chat.id)

        # –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞

        mode_n = randint(1,3)

        if call.data == 'stone':
            if mode_n == 1:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å! \n\n**–ù–∏—á—å—è!**')
                starses += randint(1, 6)
            elif mode_n == 2:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –Ω–æ–∂–Ω–∏—Ü—ã! \n\n**–¢—ã –ø–æ–±–µ–¥–∏–ª**!')
                starses += randint (5, 20)
            else:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –±—É–º–∞–≥—É! \n\n**–Ø –ø–æ–±–µ–¥–∏–ª!**')
            play()
            BOT.send_message(message_play.chat.id, check(message_play.chat.id))
        if call.data == 'scissors':
            if mode_n == 1:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å! \n\n**–Ø –ø–æ–±–µ–¥–∏–ª!**')
            elif mode_n == 2:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –Ω–æ–∂–Ω–∏—Ü—ã! \n\n**–ù–∏—á—å—è!**')
                starses += randint (1, 6)
            else:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –±—É–º–∞–≥—É! \n\n**–¢—ã –ø–æ–±–µ–¥–∏–ª!**')
                starses += randint(5, 20)
            play()
            BOT.send_message(message_play.chat.id, check(message_play.chat.id))
        if call.data == 'paper':
            if mode_n == 1:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å! \n\n**–¢—ã –ø–æ–±–µ–¥–∏–ª!**')
                starses += randint(5, 20)
            elif mode_n == 2:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –Ω–æ–∂–Ω–∏—Ü—ã! \n\n**–Ø –ø–æ–±–µ–¥–∏–ª!**')
            else:
                BOT.send_message(call.message.chat.id, '–Ø –≤—ã–±—Ä–∞–ª –±—É–º–∞–≥—É! \n\n**–ù–∏—á—å—è!**')
                starses += randint (1, 6)
            play()
            BOT.send_message(message_play.chat.id, check(message_play.chat.id))


BOT.polling()